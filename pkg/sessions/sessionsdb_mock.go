// Code generated by MockGen. DO NOT EDIT.
// Source: ../repo/repo_session.go

// Package sessions is a generated GoMock package.
package sessions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionDB is a mock of SessionDB interface.
type MockSessionDB struct {
	ctrl     *gomock.Controller
	recorder *MockSessionDBMockRecorder
}

// MockSessionDBMockRecorder is the mock recorder for MockSessionDB.
type MockSessionDBMockRecorder struct {
	mock *MockSessionDB
}

// NewMockSessionDB creates a new mock instance.
func NewMockSessionDB(ctrl *gomock.Controller) *MockSessionDB {
	mock := &MockSessionDB{ctrl: ctrl}
	mock.recorder = &MockSessionDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionDB) EXPECT() *MockSessionDBMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockSessionDB) AddSession(ctx context.Context, userId, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", ctx, userId, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockSessionDBMockRecorder) AddSession(ctx, userId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockSessionDB)(nil).AddSession), ctx, userId, token)
}

// CheckSession mocks base method.
func (m *MockSessionDB) CheckSession(ctx context.Context, userId, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", ctx, userId, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionDBMockRecorder) CheckSession(ctx, userId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionDB)(nil).CheckSession), ctx, userId, token)
}
